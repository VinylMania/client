import '../styles/globals.css'
import '../styles/reset.css'
import Head from 'next/head'
import Navbar from '../components/Navbar/Navbar'
import Footer from '../components/Layout/Footer'
import React, {useCallback, useEffect, useState} from 'react'
import {QueryClient, QueryClientProvider} from 'react-query'
import {ReactQueryDevtools} from 'react-query/devtools'
import {AppType} from 'next/dist/shared/lib/utils'
import AuthContext from '../context/auth-context'
import type {UserModel} from '../models/userModel'
import loadUser from '../utils/load-user'
import {flushSync} from 'react-dom'
import {MantineProvider} from '@mantine/core'

export async function getStaticProps() {}

const MyApp: AppType = ({Component, pageProps}) => {
  const [user, setUser] = useState<UserModel | undefined>(undefined)
  const [isAuth, setAuth] = useState(false)
  const fetchUser = useCallback(async () => {
    const userDetails: UserModel | undefined = await loadUser()
    setUser(userDetails)
    setAuth(userDetails ? true : false)
  }, [])

  useEffect(() => {
    fetchUser()
  }, [fetchUser, isAuth])

  const queryClient = new QueryClient({
    defaultOptions: {queries: {suspense: true, useErrorBoundary: false}},
  })
  return (
    <QueryClientProvider client={queryClient}>
      <ReactQueryDevtools initialIsOpen={false} />
      <AuthContext.Provider
        value={{
          logout: () => {
            localStorage.removeItem('token')
            setAuth(false)
          },
          loadUser: () => {
            fetchUser()
          },
          updateAvatar: (avatar: UserModel['avatar']) => {
            flushSync(() => {
              if (user) {
                setUser({...user, avatar})
              }
            })
          },
          isAuthenticated: isAuth,
          user,
          resetContext: () => {
            setUser(undefined)
            setAuth(false)
            localStorage.removeItem('token')
          },
        }}
      >
        <Head>
          <title>Vinyl Mania</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <MantineProvider
          withGlobalStyles
          withNormalizeCSS
          theme={{
            /** Put your mantine theme override here */
            colorScheme: 'light',
          }}
        >
          <div id="modal"></div>
          <Navbar />
          <Component {...pageProps} />
          <Footer />
        </MantineProvider>
      </AuthContext.Provider>
    </QueryClientProvider>
  )
}

export default MyApp
