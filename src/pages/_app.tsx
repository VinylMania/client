import '../styles/globals.css'
import '../styles/reset.css'
import Head from 'next/head'
import Navbar from '../../components/Navbar/Navbar'
import Footer from '../../components/Layout/Footer'
import {Provider} from 'react-redux'
import {store} from '../../store'
import Alerts from '../../components/Alerts/Alerts'
import React, {useCallback, useContext, useEffect, useState} from 'react'
import {QueryClient, QueryClientProvider} from 'react-query'
import {ReactQueryDevtools} from 'react-query/devtools'
import {withTRPC} from '@trpc/next'
import type {AppRouter} from '../server/router'
import {AppType} from 'next/dist/shared/lib/utils'
import {FaGalacticSenate, FaYenSign} from 'react-icons/fa'
import AuthContext from '../context/auth-context'
import {UserModel} from '../../models/userModel'
import loadUser from '../../utils/loadUser'

export async function getStaticProps() {}

const MyApp: AppType = ({Component, pageProps}) => {
  const [user, setUser] = useState<UserModel | undefined>(undefined)
  const [isAuth, setAuth] = useState(false)
  const [isLoading, setUserLoading] = useState(true)
  const fetchUser = useCallback(async () => {
    const userDetails: UserModel | undefined = await loadUser()
    setUser(userDetails)
    setAuth(userDetails ? true : false)
    setUserLoading(false)
  }, [])

  useEffect(() => {
    fetchUser()
    console.log(isAuth)
  }, [fetchUser, isAuth])

  const queryClient = new QueryClient()
  return (
    <QueryClientProvider client={queryClient}>
      <ReactQueryDevtools initialIsOpen={false} />
      <AuthContext.Provider
        value={{
          logout: () => {
            localStorage.removeItem('token')
            setAuth(false)
          },
          login: () => {
            fetchUser()
          },
          isLoading: isLoading,
          isAuthenticated: isAuth,
          user,
        }}
      >
        <Provider store={store}>
          <Head>
            <title>Vinyl Mania</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
          </Head>
          <Navbar />
          <Alerts />
          <div id="modal"></div>
          <Component {...pageProps} />
          <Footer />
        </Provider>
      </AuthContext.Provider>
    </QueryClientProvider>
  )
}

export default withTRPC<AppRouter>({
  config({ctx}) {
    /**
     * If you want to use SSR, you need to use the server's full URL
     * @link https://trpc.io/docs/ssr
     */
    const url = process.env.VERCEL_URL
      ? `https://${process.env.VERCEL_URL}/api/trpc`
      : 'http://localhost:3000/api/trpc'

    return {
      url,
      /**
       * @link https://react-query.tanstack.com/reference/QueryClient
       */
      // queryClientConfig: { defaultOptions: { queries: { staleTime: 60 } } },
    }
  },
  /**
   * @link https://trpc.io/docs/ssr
   */
  ssr: false,
})(MyApp)
